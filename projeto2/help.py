def dynamic_combined_mweds(
    G, 
    max_iterations=10000, 
    initial_search_size=2, 
    explore_interval=500, 
    base_threshold=0.125, 
    refine_threshold=0.25
):
    edges = list(G.edges(data="weight"))
    num_edges = len(edges)
    best_solution = edges
    min_weight = sum(w for _, _, w in edges)
    basic_operations = 0
    num_configurations = 0

    # Start with a fixed subset size
    fixed_size = initial_search_size
    max_possible_configurations = num_edges

    # Track unique subsets to avoid redundant evaluation
    seen_subsets = set()

    for iteration in range(max_iterations):
        num_configurations += 1

        # Switch between fixed-size and exploratory phases
        if iteration % explore_interval == 0 and iteration > 0:
            candidate_size_range = range(max(1, fixed_size - 1), min(num_edges, fixed_size + 2) + 1)
            candidate_size = random.choice(candidate_size_range)
        else:
            candidate_size = fixed_size

        # Generate candidate subset of exact or range-based size
        candidate_set = random.sample(edges, candidate_size)
        candidate_set_key = tuple(sorted(candidate_set))

        if candidate_set_key in seen_subsets:
            continue  # Skip redundant subset

        seen_subsets.add(candidate_set_key)
        basic_operations += len(candidate_set)

        # Check if the subset is a dominating set
        is_dominating, operations = is_edge_dominating_set(G, candidate_set)
        basic_operations += operations

        if is_dominating:
            weight = sum(w for u, v, w in candidate_set)
            basic_operations += len(candidate_set)

            if weight < min_weight:
                min_weight = weight
                best_solution = candidate_set

                # Dynamically adjust the fixed size
                if iteration / max_possible_configurations > base_threshold:
                    fixed_size = max(2, fixed_size - 1)
                elif iteration / max_possible_configurations > refine_threshold:
                    fixed_size = min(fixed_size + 1, num_edges)

    return best_solution, min_weight, basic_operations, num_configurations


def adaptive_dynamic_mweds(
    G,
    max_iterations=10000,
    initial_search_size=2,
    base_threshold=0.125,
    refine_threshold=0.25,
    exploration_interval=500
):
    """
    Dynamic randomized heuristic for MWEDS with an adaptive subset size strategy.
    
    Parameters:
    - G: The input graph.
    - max_iterations: Maximum iterations to run the algorithm.
    - initial_search_size: Initial size of the subset of edges to search.
    - base_threshold: Progress threshold to increase search size.
    - refine_threshold: Progress threshold to decrease search size for refinement.
    - exploration_interval: Interval for introducing exploratory iterations.
    """
    edges = list(G.edges(data="weight"))
    num_edges = len(edges)
    best_solution = edges
    min_weight = sum(w for _, _, w in edges)
    basic_operations = 0
    num_configurations = 0

    search_size = initial_search_size
    max_possible_configurations = num_edges

    # Use a set to track unique subsets
    seen_subsets = set()
    last_improvement = 0

    for iteration in range(max_iterations):
        num_configurations += 1

        # Adjust search size dynamically
        progress = iteration / max_possible_configurations
        if progress > base_threshold and best_solution == edges:
            search_size = min(search_size + 1, num_edges)
        elif progress > refine_threshold and best_solution != edges:
            search_size = max(search_size - 1, 1)

        # Periodically broaden the range of subset sizes
        if iteration - last_improvement > exploration_interval:
            search_range = range(max(1, search_size - 1), min(num_edges, search_size + 2))
        else:
            search_range = [search_size]

        # Generate a candidate set of size within the current range
        subset_size = random.choice(search_range)
        if subset_size <= num_edges:
            candidate_set = random.sample(edges, subset_size)
        else:
            candidate_set = edges  # Fallback if size exceeds edges

        candidate_set_key = tuple(sorted(candidate_set))

        if candidate_set_key in seen_subsets:
            continue  # Skip if already processed

        # Mark this subset as processed
        seen_subsets.add(candidate_set_key)
        basic_operations += len(candidate_set)

        is_dominating, operations = is_edge_dominating_set(G, candidate_set)
        basic_operations += operations

        if is_dominating:
            weight = sum(w for u, v, w in candidate_set)
            basic_operations += len(candidate_set)

            if weight < min_weight:
                min_weight = weight
                best_solution = candidate_set
                last_improvement = iteration  # Reset improvement tracker
                search_size = max(2, search_size - 1)

    return best_solution, min_weight, basic_operations, num_configurations

# Iteration 1079: Dominating set found. Weight = 1004.00, Current best = 15604.00
# Early termination at iteration 1079: Solution with weight = 1004.00
# Iteration 0: Progress = 0.00, Candidate size = 2
# Subset example: [('E', 'Y', 82), ('N', 'Q', 4)]...
# Iteration 100: Progress = 0.01, Candidate size = 2
# Subset example: [('D', 'X', 66), ('O', ']', 5)]...
# Iteration 200: Progress = 0.02, Candidate size = 2
# Subset example: [('T', 'W', 43), ('F', 'J', 7)]...
# Iteration 300: Progress = 0.03, Candidate size = 2
# Subset example: [('H', 'I', 21), ('L', 'O', 91)]...
# Iteration 400: Progress = 0.04, Candidate size = 2
# Subset example: [('P', 'X', 90), ('U', 'W', 10)]...
# Iteration 500: Progress = 0.05, Candidate size = 2
# Subset example: [('N', 'Q', 4), ('Q', 'T', 18)]...
# Iteration 600: Progress = 0.06, Candidate size = 2
# Subset example: [('E', 'P', 64), ('O', '^', 80)]...
# Iteration 700: Progress = 0.07, Candidate size = 2
# Subset example: [('U', 'X', 41), ('F', '\\', 32)]...
# Iteration 800: Progress = 0.08, Candidate size = 2
# Subset example: [('D', 'X', 66), ('C', 'H', 14)]...
# Iteration 1000: Progress = 0.10, Candidate size = 2
# Subset example: [('A', 'H', 47), ('H', 'M', 23)]...
# Iteration 1300: Progress = 0.13, Candidate size = 2
# Subset example: [('V', 'X', 71), ('N', 'Q', 4)]...
# Iteration 1700: Progress = 0.17, Candidate size = 2
# Subset example: [('C', 'X', 87), ('A', 'O', 94)]...
# Iteration 2500: Progress = 0.25, Candidate size = 2
# Subset example: [('J', 'Y', 37), ('R', 'X', 32)]...
# Iteration 2700: Progress = 0.27, Candidate size = 2
# Subset example: [('J', 'R', 38), ('K', 'S', 10)]...
# Iteration 3400: Progress = 0.34, Candidate size = 2
# Subset example: [('M', 'T', 45), ('O', ']', 5)]...
# Iteration 3600: Progress = 0.36, Candidate size = 2
# Subset example: [('R', 'X', 32), ('E', 'S', 49)]...
# Iteration 5000: Progress = 0.50, Candidate size = 3
# Subset example: [('K', 'S', 10), ('L', 'O', 91), ('B', 'U', 60)]...
# Iteration 5100: Progress = 0.51, Candidate size = 3
# Subset example: [('I', ']', 52), ('A', 'H', 47), ('A', 'O', 94)]...
# Iteration 5200: Progress = 0.52, Candidate size = 3
# Subset example: [('M', 'T', 45), ('V', 'X', 71), ('A', 'H', 47)]...
# Iteration 5300: Progress = 0.53, Candidate size = 3
# Subset example: [('E', 'Y', 82), ('E', 'S', 49), ('A', 'H', 47)]...
# Iteration 5400: Progress = 0.54, Candidate size = 3
# Subset example: [('D', 'R', 94), ('C', 'X', 87), ('U', '^', 58)]...
# Iteration 5500: Progress = 0.55, Candidate size = 3
# Subset example: [('I', ']', 52), ('A', 'H', 47), ('E', 'Y', 82)]...
# Iteration 5600: Progress = 0.56, Candidate size = 3
# Subset example: [('B', 'Q', 82), ('T', 'W', 43), ('I', 'T', 47)]...
# Iteration 5700: Progress = 0.57, Candidate size = 3
# Subset example: [('K', 'Z', 91), ('C', 'H', 14), ('U', '^', 58)]...
# Iteration 5800: Progress = 0.58, Candidate size = 3
# Subset example: [('B', 'U', 60), ('M', 'R', 92), ('A', 'H', 47)]...
# Iteration 5900: Progress = 0.59, Candidate size = 3
# Subset example: [('E', 'P', 64), ('L', 'N', 59), ('U', 'W', 10)]...
# Iteration 6000: Progress = 0.60, Candidate size = 3
# Subset example: [('S', 'W', 32), ('N', 'Q', 4), ('J', 'Y', 37)]...
# Iteration 6100: Progress = 0.61, Candidate size = 3
# Subset example: [('U', '^', 58), ('H', 'I', 21), ('O', ']', 5)]...
# Iteration 6200: Progress = 0.62, Candidate size = 3
# Subset example: [('Y', '\\', 50), ('D', 'R', 94), ('E', 'Y', 82)]...
# Iteration 6300: Progress = 0.63, Candidate size = 3
# Subset example: [('J', 'Y', 37), ('G', '\\', 21), ('P', 'X', 90)]...
# Iteration 6400: Progress = 0.64, Candidate size = 3
# Subset example: [('H', 'M', 23), ('A', 'O', 94), ('Q', 'T', 18)]...
# Iteration 6500: Progress = 0.65, Candidate size = 3
# Subset example: [('F', 'J', 7), ('A', 'O', 94), ('H', 'I', 21)]...
# Iteration 6600: Progress = 0.66, Candidate size = 3
# Subset example: [('C', 'H', 14), ('M', 'T', 45), ('P', 'Y', 3)]...
# Iteration 6700: Progress = 0.67, Candidate size = 4
# Subset example: [('B', '^', 75), ('A', 'O', 94), ('G', 'Z', 24), ('Y', '\\', 50)]...
# Iteration 6800: Progress = 0.68, Candidate size = 4
# Subset example: [('V', 'W', 6), ('N', 'Q', 4), ('I', ']', 52), ('V', 'X', 71)]...
# Iteration 6900: Progress = 0.69, Candidate size = 4
# Subset example: [('E', 'S', 49), ('U', 'W', 10), ('U', 'X', 41), ('U', 'Z', 68)]...
# Iteration 7000: Progress = 0.70, Candidate size = 4
# Subset example: [('M', 'T', 45), ('E', 'S', 49), ('F', 'R', 75), ('K', 'S', 10)]...
# Iteration 7100: Progress = 0.71, Candidate size = 4
# Subset example: [('A', '\\', 26), ('M', 'T', 45), ('E', 'Y', 82), ('U', 'X', 41)]...
# Iteration 7200: Progress = 0.72, Candidate size = 4
# Subset example: [('G', '\\', 21), ('E', 'Y', 82), ('T', 'W', 43), ('J', 'R', 38)]...
# Iteration 7300: Progress = 0.73, Candidate size = 4
# Subset example: [('B', 'Q', 82), ('F', '\\', 32), ('B', '^', 75), ('D', 'R', 94)]...
# Iteration 7400: Progress = 0.74, Candidate size = 4
# Subset example: [('I', ']', 52), ('U', 'Z', 68), ('A', '\\', 26), ('I', 'T', 47)]...
# Iteration 7500: Progress = 0.75, Candidate size = 4
# Subset example: [('E', 'S', 49), ('F', 'R', 75), ('C', 'G', 16), ('L', 'O', 91)]...
# Iteration 7600: Progress = 0.76, Candidate size = 4
# Subset example: [('C', 'H', 14), ('J', 'R', 38), ('L', 'O', 91), ('I', ']', 52)]...
# Iteration 7700: Progress = 0.77, Candidate size = 4
# Subset example: [('E', 'S', 49), ('Y', '\\', 50), ('E', 'Y', 82), ('A', 'H', 47)]...
# Iteration 7800: Progress = 0.78, Candidate size = 4
# Subset example: [('E', 'Y', 82), ('L', '[', 66), ('V', 'W', 6), ('Y', '\\', 50)]...
# Iteration 7900: Progress = 0.79, Candidate size = 4
# Subset example: [('B', 'U', 60), ('Y', '\\', 50), ('O', ']', 5), ('G', 'J', 50)]...
# Iteration 8000: Progress = 0.80, Candidate size = 4
# Subset example: [('M', 'S', 61), ('Q', 'T', 18), ('L', 'O', 91), ('V', 'X', 71)]...
# Iteration 8100: Progress = 0.81, Candidate size = 4
# Subset example: [('U', 'Z', 68), ('H', 'M', 23), ('K', 'S', 10), ('P', 'Y', 3)]...
# Iteration 8200: Progress = 0.82, Candidate size = 4
# Subset example: [('U', 'W', 10), ('D', 'R', 94), ('Y', '\\', 50), ('U', 'Z', 68)]...
# Iteration 8300: Progress = 0.83, Candidate size = 4
# Subset example: [('G', ']', 1), ('M', 'R', 92), ('V', 'X', 71), ('K', 'Z', 91)]...
# Iteration 8400: Progress = 0.84, Candidate size = 5
# Subset example: [('V', 'W', 6), ('V', '^', 58), ('G', ']', 1), ('B', '^', 75), ('Y', '\\', 50)]...
# Iteration 8500: Progress = 0.85, Candidate size = 5
# Subset example: [('I', 'T', 47), ('D', 'R', 94), ('Q', 'T', 18), ('N', 'Q', 4), ('C', 'G', 16)]...
# Iteration 8600: Progress = 0.86, Candidate size = 5
# Subset example: [('R', 'X', 32), ('L', 'N', 59), ('U', 'Z', 68), ('U', '^', 58), ('P', 'X', 90)]...
# Iteration 8700: Progress = 0.87, Candidate size = 5
# Subset example: [('I', 'T', 47), ('A', 'K', 20), ('B', 'U', 60), ('Q', 'T', 18), ('K', 'Z', 91)]...
# Iteration 8800: Progress = 0.88, Candidate size = 5
# Subset example: [('G', 'J', 50), ('R', 'X', 32), ('G', '\\', 21), ('U', 'Z', 68), ('E', 'G', 85)]...
# Iteration 8900: Progress = 0.89, Candidate size = 5
# Subset example: [('J', 'R', 38), ('S', 'W', 32), ('O', '^', 80), ('A', 'O', 94), ('F', 'J', 7)]...
# Iteration 9000: Progress = 0.90, Candidate size = 5
# Subset example: [('U', 'X', 41), ('P', 'Y', 3), ('Q', 'T', 18), ('B', 'N', 49), ('D', 'X', 66)]...
# Iteration 9100: Progress = 0.91, Candidate size = 5
# Subset example: [('B', '^', 75), ('A', 'O', 94), ('I', 'T', 47), ('B', 'Q', 82), ('A', 'K', 20)]...
# Iteration 9200: Progress = 0.92, Candidate size = 5
# Subset example: [('P', 'X', 90), ('U', 'Z', 68), ('H', 'M', 23), ('V', 'X', 71), ('Q', 'T', 18)]...
# Iteration 9300: Progress = 0.93, Candidate size = 5
# Subset example: [('K', 'Z', 91), ('F', 'R', 75), ('U', 'Z', 68), ('D', 'X', 66), ('B', 'Q', 82)]...
# Iteration 9400: Progress = 0.94, Candidate size = 5
# Subset example: [('K', 'Z', 91), ('B', 'U', 60), ('J', 'R', 38), ('V', 'X', 71), ('G', 'J', 50)]...
# Iteration 9500: Progress = 0.95, Candidate size = 5
# Subset example: [('H', 'M', 23), ('V', '^', 58), ('F', 'R', 75), ('D', 'X', 66), ('G', '\\', 21)]...
# Iteration 9600: Progress = 0.96, Candidate size = 5
# Subset example: [('K', 'Z', 91), ('E', 'S', 49), ('A', 'K', 20), ('G', '\\', 21), ('B', 'Q', 82)]...
# Iteration 9700: Progress = 0.97, Candidate size = 5
# Subset example: [('B', 'N', 49), ('L', 'O', 91), ('K', 'Z', 91), ('L', '[', 66), ('F', '\\', 32)]...
# Iteration 9800: Progress = 0.98, Candidate size = 5
# Subset example: [('B', '^', 75), ('U', 'X', 41), ('I', 'T', 47), ('F', 'R', 75), ('K', 'S', 10)]...
# Iteration 9900: Progress = 0.99, Candidate size = 5
# Subset example: [('V', 'W', 6), ('H', 'I', 21), ('K', 'S', 10), ('J', 'Y', 37), ('E', 'Y', 82)]...
# Iteration 0: Progress = 0.00, Candidate size = 2
# Subset example: [('F', 'W', 45), ('F', '^', 77)]...
# Iteration 100: Progress = 0.01, Candidate size = 2
# Subset example: [('G', 'Q', 23), ('H', 'I', 72)]...
# Iteration 200: Progress = 0.02, Candidate size = 2
# Subset example: [('J', 'R', 58), ('I', 'Y', 21)]...
# Iteration 300: Progress = 0.03, Candidate size = 2
# Subset example: [('U', '[', 3), ('T', 'U', 58)]...
# Iteration 500: Progress = 0.05, Candidate size = 2
# Subset example: [('B', 'Q', 76), ('[', '^', 86)]...
# Iteration 600: Progress = 0.06, Candidate size = 2
# Subset example: [('W', ']', 63), ('I', '[', 60)]...
# Iteration 700: Progress = 0.07, Candidate size = 2
# Subset example: [('E', 'P', 95), ('D', 'H', 2)]...
# Iteration 900: Progress = 0.09, Candidate size = 2
# Subset example: [('M', 'Z', 53), ('M', 'P', 80)]...
# Iteration 1000: Progress = 0.10, Candidate size = 2
# Subset example: [('D', 'P', 53), ('P', 'T', 33)]...
# Iteration 1100: Progress = 0.11, Candidate size = 2
# Subset example: [('C', 'R', 39), ('L', 'Z', 11)]...
# Iteration 1200: Progress = 0.12, Candidate size = 3
# Subset example: [('D', 'V', 18), ('N', 'T', 48), ('N', 'P', 1)]...
# Iteration 1300: Progress = 0.13, Candidate size = 3
# Subset example: [('T', 'U', 58), ('H', 'I', 72), ('H', 'N', 71)]...
# Iteration 1400: Progress = 0.14, Candidate size = 3
# Subset example: [('F', 'W', 45), ('O', '^', 7), ('N', 'Y', 65)]...
# Iteration 1500: Progress = 0.15, Candidate size = 4
# Subset example: [('C', 'V', 37), ('O', 'Y', 37), ('V', '^', 23), ('K', 'X', 33)]...
# Iteration 1600: Progress = 0.16, Candidate size = 4
# Subset example: [('A', 'U', 46), ('D', 'H', 2), ('U', 'V', 34), ('D', 'Y', 96)]...
# Iteration 1700: Progress = 0.17, Candidate size = 4
# Subset example: [('P', 'Y', 45), ('K', 'S', 50), ('W', ']', 63), ('E', 'R', 78)]...
# Iteration 1800: Progress = 0.18, Candidate size = 4
# Subset example: [('C', ']', 90), ('B', 'P', 29), ('N', 'Y', 65), ('O', 'Y', 37)]...
# Iteration 1900: Progress = 0.19, Candidate size = 5
# Subset example: [('F', 'N', 40), ('U', '[', 3), ('S', '^', 60), ('M', '^', 9), ('V', '\\', 19)]...
# Iteration 2000: Progress = 0.20, Candidate size = 5
# Subset example: [('A', 'X', 55), ('A', 'R', 54), ('B', 'W', 94), ('P', 'R', 61), ('G', 'Z', 32)]...
# Iteration 2100: Progress = 0.21, Candidate size = 5
# Subset example: [('A', 'X', 55), ('E', 'M', 57), ('A', 'R', 54), ('N', 'R', 69), ('L', '[', 8)]...
# Iteration 2200: Progress = 0.22, Candidate size = 5
# Subset example: [('E', 'P', 95), ('T', 'U', 58), ('B', 'P', 29), ('H', 'K', 38), ('F', 'N', 40)]...
# Iteration 2300: Progress = 0.23, Candidate size = 6
# Subset example: [('X', ']', 97), ('S', 'X', 96), ('S', 'Z', 63), ('O', '^', 7), ('N', 'T', 48)]...
# Iteration 2400: Progress = 0.24, Candidate size = 6
# Subset example: [('O', 'Y', 37), ('G', '[', 61), ('L', 'Y', 66), ('C', 'H', 47), ('V', '\\', 19)]...
# Iteration 2500: Progress = 0.25, Candidate size = 6
# Subset example: [('D', 'Y', 96), ('H', 'J', 63), ('J', 'O', 35), ('S', 'V', 37), ('F', 'H', 61)]...
# Iteration 2600: Progress = 0.26, Candidate size = 7
# Subset example: [('G', 'J', 66), ('A', 'O', 87), ('D', '[', 98), ('J', 'Q', 32), ('C', 'D', 6)]...
# Iteration 2700: Progress = 0.27, Candidate size = 7
# Subset example: [('E', 'M', 57), ('J', 'O', 35), ('A', 'P', 55), ('A', 'R', 54), ('Q', '[', 15)]...
# Iteration 2800: Progress = 0.28, Candidate size = 7
# Subset example: [('L', '[', 8), ('A', 'O', 87), ('O', '[', 3), ('I', 'W', 9), (']', '^', 19)]...
# Iteration 2900: Progress = 0.29, Candidate size = 7
# Subset example: [('M', 'Z', 53), ('D', 'H', 2), ('H', 'N', 71), ('T', 'U', 58), ('K', 'Z', 70)]...
# Iteration 3000: Progress = 0.30, Candidate size = 8
# Subset example: [('F', '^', 77), ('Q', 'W', 6), ('W', '\\', 29), ('V', '\\', 19), ('J', 'O', 35)]...
# Iteration 3100: Progress = 0.31, Candidate size = 8
# Subset example: [('F', '[', 85), ('F', 'N', 40), ('B', 'W', 94), ('F', 'V', 89), ('M', 'Z', 53)]...
# Iteration 3200: Progress = 0.32, Candidate size = 8
# Subset example: [('I', ']', 44), ('E', 'L', 26), ('E', 'K', 71), ('O', '[', 3), ('F', 'H', 61)]...
# Iteration 3300: Progress = 0.33, Candidate size = 8
# Subset example: [('J', 'R', 58), ('F', 'W', 45), ('R', 'Y', 80), ('V', 'Z', 41), ('U', 'W', 27)]...
# Iteration 3400: Progress = 0.34, Candidate size = 9
# Subset example: [('E', 'P', 95), ('S', 'V', 37), ('S', 'Z', 63), ('L', '[', 8), ('X', ']', 97)]...
# Iteration 3500: Progress = 0.35, Candidate size = 9
# Subset example: [('J', 'S', 47), ('Y', 'Z', 40), ('H', 'I', 72), ('[', '^', 86), ('X', ']', 97)]...
# Iteration 3600: Progress = 0.36, Candidate size = 9
# Subset example: [('Y', 'Z', 40), ('E', 'L', 26), ('A', 'U', 46), ('C', 'H', 47), ('J', 'Y', 43)]...
# Iteration 3700: Progress = 0.37, Candidate size = 9
# Subset example: [('J', 'Q', 32), ('H', 'X', 67), ('G', 'Q', 23), ('E', 'L', 26), ('C', 'D', 6)]...
# Iteration 3800: Progress = 0.38, Candidate size = 10
# Subset example: [('J', 'S', 47), ('E', 'R', 78), ('J', 'Y', 43), ('G', 'P', 96), ('G', 'J', 66)]...
# Iteration 3900: Progress = 0.39, Candidate size = 10
# Subset example: [('V', '\\', 19), ('N', 'R', 69), ('L', 'Y', 66), ('F', 'W', 45), ('X', ']', 97)]...
# Iteration 4000: Progress = 0.40, Candidate size = 10
# Subset example: [('D', 'J', 72), ('I', ']', 44), ('L', 'Y', 66), ('X', ']', 97), ('P', 'R', 61)]...
# Iteration 4100: Progress = 0.41, Candidate size = 11
# Subset example: [('Q', '[', 15), ('H', 'J', 63), ('F', 'T', 19), ('E', 'R', 78), ('G', '[', 61)]...
# Iteration 4200: Progress = 0.42, Candidate size = 11
# Subset example: [('G', 'Q', 23), ('K', 'X', 33), ('N', 'P', 1), ('L', ']', 76), ('C', '^', 39)]...
# Iteration 4300: Progress = 0.43, Candidate size = 11
# Subset example: [('U', 'W', 27), ('H', 'N', 71), ('L', 'N', 1), ('A', 'R', 54), ('H', 'J', 63)]...
# Iteration 4400: Progress = 0.44, Candidate size = 11
# Subset example: [('K', 'M', 57), ('E', 'P', 95), ('Y', 'Z', 40), ('A', 'X', 55), ('D', 'Y', 96)]...
# Iteration 4500: Progress = 0.45, Candidate size = 12
# Subset example: [('A', 'X', 55), ('H', 'J', 63), ('D', 'V', 18), ('E', 'T', 1), ('K', 'T', 9)]...
# Iteration 4600: Progress = 0.46, Candidate size = 12
# Subset example: [('G', 'Q', 23), ('P', 'R', 61), ('Q', 'W', 6), ('E', 'R', 78), ('[', '^', 86)]...
# Iteration 4700: Progress = 0.47, Candidate size = 12
# Subset example: [('P', 'R', 61), ('F', 'V', 89), ('I', '[', 60), ('C', 'H', 47), ('I', 'W', 9)]...
# Iteration 4800: Progress = 0.48, Candidate size = 12
# Subset example: [('F', 'N', 40), ('F', '[', 85), ('E', 'L', 26), ('J', 'W', 41), ('M', '^', 9)]...
# Iteration 4900: Progress = 0.49, Candidate size = 13
# Subset example: [('C', 'D', 6), ('E', 'Q', 84), ('U', 'V', 34), ('C', 'R', 39), ('E', 'M', 57)]...
# Iteration 5000: Progress = 0.50, Candidate size = 13
# Subset example: [('X', ']', 97), ('S', 'X', 96), ('I', '[', 60), ('A', 'U', 46), ('P', 'Y', 45)]...
# Iteration 5100: Progress = 0.51, Candidate size = 13
# Subset example: [('I', 'Y', 21), ('H', 'J', 63), ('U', 'W', 27), ('[', '^', 86), ('E', 'S', 18)]...
# Iteration 5200: Progress = 0.52, Candidate size = 14
# Subset example: [('B', 'E', 12), ('J', 'O', 35), ('R', 'Y', 80), ('C', 'H', 47), ('J', 'R', 58)]...
# Iteration 5300: Progress = 0.53, Candidate size = 14
# Subset example: [('A', 'X', 55), ('R', 'Y', 80), ('M', 'P', 80), ('P', 'T', 33), ('G', '[', 61)]...
# Iteration 5400: Progress = 0.54, Candidate size = 14
# Subset example: [('J', 'Q', 32), ('Y', 'Z', 40), (']', '^', 19), ('F', 'N', 40), ('G', 'Z', 32)]...
# Iteration 5500: Progress = 0.55, Candidate size = 14
# Subset example: [('G', '^', 28), ('X', ']', 97), ('C', ']', 90), ('U', 'W', 27), ('M', 'W', 8)]...
# Iteration 5600: Progress = 0.56, Candidate size = 15
# Subset example: [('I', '[', 60), ('A', 'P', 55), ('H', 'K', 38), ('N', 'P', 1), ('H', 'X', 67)]...
# Iteration 5700: Progress = 0.57, Candidate size = 15
# Subset example: [('G', 'Q', 23), ('A', 'U', 46), ('Q', 'W', 6), ('G', 'P', 96), ('F', 'N', 40)]...
# Iteration 5800: Progress = 0.58, Candidate size = 15
# Subset example: [('H', 'K', 38), ('M', '^', 9), ('O', '[', 3), ('P', 'R', 61), ('N', 'W', 9)]...
# Iteration 5835: Dominating set found. Weight = 727.00, Current best = 5092.00
# Early termination at iteration 5835: Solution with weight = 727.00